<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[this blog is under construction ...]]></title>
  <link href="http://zx1986.github.com/atom.xml" rel="self"/>
  <link href="http://zx1986.github.com/"/>
  <updated>2013-03-01T14:57:00+08:00</updated>
  <id>http://zx1986.github.com/</id>
  <author>
    <name><![CDATA[zx1986]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nginx]]></title>
    <link href="http://zx1986.github.com/blog/nginx.html"/>
    <updated>2012-10-11T11:04:00+08:00</updated>
    <id>http://zx1986.github.com/blog/nginx</id>
    <content type="html"><![CDATA[<pre><code># Passenger
server {
  listen 8080;
  server_name localhost;
  root /Users/laas/proged/rack_test/public;
  passenger_enabled on;
  rack_env production;
  passenger_min_instances 4;
}

# Unicorn
upstream unicorn_server {
  server unix:/Users/laas/proged/rack_test/tmp/unicorn.sock fail_timeout=0;
}

server {
  listen 8081;
  server_name localhost;
  root /Users/laas/proged/rack_test/public;

  location / {
    proxy_pass http://unicorn_server;
  }
}

# Thin
upstream thin_server{
  server unix:/Users/laas/proged/rack_test/tmp/thin.0.sock fail_timeout=0;
  server unix:/Users/laas/proged/rack_test/tmp/thin.1.sock fail_timeout=0;
  server unix:/Users/laas/proged/rack_test/tmp/thin.2.sock fail_timeout=0;
  server unix:/Users/laas/proged/rack_test/tmp/thin.3.sock fail_timeout=0;
}

server {
  listen 8082;
  server_name localhost;
  root /Users/laas/proged/rack_test/public;

  location / {
    proxy_pass http://thin_server;
  }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HP DL380p Gen8]]></title>
    <link href="http://zx1986.github.com/blog/hp-dl380p-gen8.html"/>
    <updated>2012-08-10T08:57:00+08:00</updated>
    <id>http://zx1986.github.com/blog/hp-dl380p-gen8</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Javascript]]></title>
    <link href="http://zx1986.github.com/blog/debugging-javascript.html"/>
    <updated>2012-08-04T15:19:00+08:00</updated>
    <id>http://zx1986.github.com/blog/debugging-javascript</id>
    <content type="html"><![CDATA[<p>讀了這個 <a href="http://fixingthesejquery.com">Slide</a>，想做個筆記。</p>

<p>首先，要認識各個瀏覽器的 Debugger。
Firefox，Chrome，甚至 IE，都有它們自己的 Debugger。
這些 Debugger 長得都很像，熟悉了其中一種，其他都大同小异。
各個 Debugger 預設的啟動快捷鍵大都是<code>F12</code>。</p>

<p>Firefox 除了非常知名的 Debug Plugin：<a href="https://getfirebug.com">Firebug</a>。
還內建了個更炫的玩意：3D View。
在網頁中<code>點擊右鍵</code>，選擇<code>檢視元素</code>，右下角有一個<code>3D View</code>按鈕。
它可以讓你在三維環境中，檢視每個網頁元素（DOM Element）。
在分析多層 CSS Layer（z-index）的網頁時，非常實用！</p>

<p>使用 jQuery 出現<code>jQuery is not defined</code>或<code>$ is not defined</code>時，
請先檢查 jQuery 的引入路徑是否正確，
<code>$</code>別名符號是否已經被其他的 Javascrip Library 用走了？
可以用<code>jQuery.noConflict()</code>函式檢查一下。</p>

<p>出現<code>jQuery.fn.somePlugin is not defined</code>時，
先檢查 Plugin Library 是否有在載入 jQuery Library 之後載入。</p>

<p>善用 Debugger 中的 breakpoint（斷點）設定。
在想要設定斷點的 Javascript 語句後，
加入一行<code>debugger;</code>即可輕鬆設定斷點。</p>

<p>Debugger 中找到一個叫<code>watch expression</code>的地方，
直接輸入想要檢查的變數，它會把這個變數的身家通通翻出來。
例如輸入：<code>this</code></p>

<p>使用<code>window.alert('錯誤訊息或變數')</code>不是個好主意。
改用<code>console.log('錯誤訊息或變數')</code>搭配 Debugger 的 Console 視窗是好主意！
例如<code>console.log($(""your selector").length)</code>可以檢查元素是否存在。
Console 視窗還有一大堆 <a href="http://getfirebug.com/wiki/index.php/Console_API">API function</a> 。</p>

<p>搭配 jQuery 的 Javascript 建議寫法：</p>

<pre><code>(function($)){
    $(document).ready(function(){

            // your code ...

    });
}(jQuery); // take $ as jQuery
</code></pre>

<p>以確定整個 DOM 文件載入完成後，才執行你寫的 Javascript 腳本。</p>

<blockquote><p>When you call $(&#8216;a&#8217;), it returns all the links on the page at the time it was called, and .click(fn) adds your handler to only those elements. When new links are added, they are not affected.</p></blockquote>

<pre><code>$(document).bind("click", function(e)
{
  if ($(e.target).is("a")
  {
    // this === document
  }
});

$(document).delegate("a", "click", function(e)
{
    // this === clicked anchor
});

$("a").live("click", function(e)
{
    // this === clicked anchor
});
</code></pre>

<p>注意，呼叫 this 的 jQuery 物件時，是用<code>$(this)</code>，不是<code>$('this')</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twig]]></title>
    <link href="http://zx1986.github.com/blog/twig.html"/>
    <updated>2012-07-19T16:39:00+08:00</updated>
    <id>http://zx1986.github.com/blog/twig</id>
    <content type="html"><![CDATA[<h4>Reference</h4>

<ul>
<li><a href="http://coding.smashingmagazine.com/2011/10/17/getting-started-with-php-templating/">http://coding.smashingmagazine.com/2011/10/17/getting-started-with-php-templating/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Icon Fonts]]></title>
    <link href="http://zx1986.github.com/blog/icon-fonts.html"/>
    <updated>2012-07-19T11:16:00+08:00</updated>
    <id>http://zx1986.github.com/blog/icon-fonts</id>
    <content type="html"><![CDATA[<h4>Reference</h4>

<ul>
<li><a href="http://yatil.net/a-better-way-to-use-icon-fonts">http://yatil.net/a-better-way-to-use-icon-fonts</a></li>
<li><a href="http://24ways.org/2011/displaying-icons-with-fonts-and-data-attributes">http://24ways.org/2011/displaying-icons-with-fonts-and-data-attributes</a></li>
<li><a href="http://css-tricks.com/examples/IconFont/">http://css-tricks.com/examples/IconFont/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS, Sass, SCSS]]></title>
    <link href="http://zx1986.github.com/blog/scss.html"/>
    <updated>2012-07-19T10:36:00+08:00</updated>
    <id>http://zx1986.github.com/blog/scss</id>
    <content type="html"><![CDATA[<p>CSS &lt; Sass &lt; SCSS</p>

<ul>
<li><a href="http://sass-lang.com/">http://sass-lang.com/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LESS]]></title>
    <link href="http://zx1986.github.com/blog/less.html"/>
    <updated>2012-07-19T10:36:00+08:00</updated>
    <id>http://zx1986.github.com/blog/less</id>
    <content type="html"><![CDATA[<p>Sass v.s. LESS</p>

<p>LESS could work on client side, or work with NodeJS on server side.</p>

<ul>
<li><a href="http://lesscss.org/">http://lesscss.org/</a></li>
<li><a href="http://www.lesscss.net/">http://www.lesscss.net/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Ruhoh 寫 Blog]]></title>
    <link href="http://zx1986.github.com/blog/ruhoh.html"/>
    <updated>2012-07-16T22:00:00+08:00</updated>
    <id>http://zx1986.github.com/blog/ruhoh</id>
    <content type="html"><![CDATA[<h4>Reference</h4>

<ul>
<li><a href="http://ruhoh.com/usage/">http://ruhoh.com/usage/</a></li>
<li><a href="http://ruhoh.com/how-it-works/">http://ruhoh.com/how-it-works/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Octopress 寫 Blog]]></title>
    <link href="http://zx1986.github.com/blog/octopress.html"/>
    <updated>2012-07-16T21:55:00+08:00</updated>
    <id>http://zx1986.github.com/blog/octopress</id>
    <content type="html"><![CDATA[<h4>Reference</h4>

<ul>
<li><a href="http://octopress.org/docs/">http://octopress.org/docs/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll 網頁產生器]]></title>
    <link href="http://zx1986.github.com/blog/jekyll.html"/>
    <updated>2012-07-16T21:50:00+08:00</updated>
    <id>http://zx1986.github.com/blog/jekyll</id>
    <content type="html"><![CDATA[<p>https://github.com/mojombo/jekyll <br/>
http://octopress.org/blog/2011/07/23/octopress-20-surfaces/ <br/>
http://ruhoh.com/how-it-works/
http://liquidmarkup.org/</p>

<p>http://yihui.name/cn/2012/02/hello-jekyll/
http://freemind.pluskid.org/technology/the-unbearable-madness-of-static-blog-generators/</p>

<h4>Reference</h4>

<ul>
<li><a href="https://github.com/mojombo/jekyll/">https://github.com/mojombo/jekyll/</a></li>
<li><a href="http://jekyllbootstrap.com/">http://jekyllbootstrap.com/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML]]></title>
    <link href="http://zx1986.github.com/blog/html.html"/>
    <updated>2012-01-01T01:01:00+08:00</updated>
    <id>http://zx1986.github.com/blog/html</id>
    <content type="html"><![CDATA[<h3>HyperText Markup Language</h3>

<p><a href="http://zh.wikipedia.org/wiki/HTML">http://zh.wikipedia.org/wiki/HTML</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Language]]></title>
    <link href="http://zx1986.github.com/blog/programming-language.html"/>
    <updated>2011-01-01T01:01:00+08:00</updated>
    <id>http://zx1986.github.com/blog/programming-language</id>
    <content type="html"><![CDATA[<p>我想，學習某項領域的知識，先了解其概觀，理解基本元素、專有名詞是很必要的。</p>

<p>例如： <br/>
學習中醫，得先理解「五行」、「陰陽」、「經絡」這些名詞。 <br/>
學習數學，則需要明白「加」、「減」、「乘」、「除」的意義。</p>

<p>而關於電腦科學，必須先初淺的知道硬體與軟體這回事。 <br/>
在眼可見、手可觸的硬體之中，有五感不可及的軟體存在著。</p>

<p>「軟體」可以解釋的範圍很廣。 <br/>
作業系統（Operation System，常見的 Windows、OS X、Ubuntu）是軟體， <br/>
應用程式（Application，包括手機上的 App）是軟體， <br/>
驅動程式（Driver，ATi 或 nVIDIA 的顯示卡驅動）也是軟體， <br/>
腳本檔案（Script，bash、python、php、ruby 等語言寫的檔案）也可以算是軟體。</p>

<blockquote><p>軟體（Software）是一系列按照特定順序組織的電腦數據和指令的集合。 <br/>
一般來講軟體被劃分為系統軟體、應用軟體，和介於這兩者之間的中介軟體。 <br/>
其中系統軟體為電腦使用提供最基本的功能，但是並不針對某一特定應用領域。 <br/>
而應用軟體則恰好相反，不同的應用軟體根據用戶和所服務的領域提供不同的功能。</p></blockquote>

<p>維基百科說的『按照特定順序組織的電腦數據和指令的集合』可以看成就是「程式語言」。</p>

<blockquote><p>程式語言（Programming Language），又稱程式設計語言（Program Design Language）。 <br/>
在過去的幾十年間，大量的程式語言被發明、被取代、被修改或組合在一起。</p></blockquote>

<p>直接從英文字面去看「Programming Language」。 <br/>
Programming 可以解釋成『程式化的』或『可以程式化的』， <br/>
Language 直接理解就可以，就是『語言』。  <br/>
注意，Programming Language 是單數，是一個統稱，底下有許多種不同類型的語言。</p>

<p>就像是英文、日文、俄文，都是人類（human being）溝通用的語言，簡稱語言。 <br/>
如果是鳥類溝通用的語言，或許有孔雀語、鴿子語、信天翁語，可以簡稱爲鳥語。</p>

<p>『程式化的語言』或『可以程式化的語言』，簡稱「程式語言」， <br/>
「程式語言」這個名詞就類似「人類語言」、「鳥類語言」。 <br/>
「程式語言」是人類與電腦（硬體或軟體）溝通的語言。</p>

<p>既然是語言，就有其語法、規則、慣例、特性。 <br/>
像是讀書時死背硬記的英文語法、片語規則、過去式進行式、破刀式破劍式。 <br/>
日文、俄文當然又有其各自的規則與玩法，而且都不盡相同。</p>

<blockquote><p>每一種程式語言可以被看作是一套包含語法、詞彙和含義的正式規範。</p></blockquote>

<p>最原始的、最赤裸裸的程式語言：機械碼（二進位碼）  <br/>
類似 The Martix 中複雜的 0 與 1 的組合，一般人類是無法解讀的（除非你是 Neo）。</p>

<blockquote><p>高階語言的出現使得電腦程式語言不再過度地倚賴某種特定的機器或環境。 <br/>
因為高階語言在不同的平台上會被編譯成不同的機器語言，而不是直接被機器執行。</p></blockquote>

<p>具有程式化規則的語言</p>

<p><i class="icon-book"></i> <br/>
- <a href="http://en.wikipedia.org/wiki/Software">http://en.wikipedia.org/wiki/Software</a> <br/>
- <a href="http://en.wikipedia.org/wiki/Programming_language">http://en.wikipedia.org/wiki/Programming_language</a> <br/>
- <a href="http://en.wikipedia.org/wiki/Traditional_Chinese_medicine">http://en.wikipedia.org/wiki/Traditional_Chinese_medicine</a></p>
]]></content>
  </entry>
  
</feed>
