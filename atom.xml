<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[張旭]]></title>
  <link href="http://zx1986.github.io/atom.xml" rel="self"/>
  <link href="http://zx1986.github.io/"/>
  <updated>2013-06-01T23:44:25+08:00</updated>
  <id>http://zx1986.github.io/</id>
  <author>
    <name><![CDATA[zx1986]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[安裝 Gitlab]]></title>
<link href="http://zx1986.github.io/blog/gitlab.html"/>
<updated>2013-06-01T23:04:05+08:00</updated>
<id>http://zx1986.github.io/blog/gitlab</id>
<category term="git" /><category term="linux" />

      <content type="html"><![CDATA[<p>本文記錄 RHEL 6.3 x86_64 環境中安裝 Gitlab 的過程。
如果是 Ubuntu 的環境要安裝 Gitlab，可以直接參考<a href="https://github.com/gitlabhq/gitlabhq#installation">官方的安裝手冊</a>。</p>

<h2>安裝相依性套件</h2>

<p>先安裝 EPEL 套件庫：</p>

<ol>
<li>cd /opt</li>
<li>wget <a href="http://mirror01.idc.hinet.net/EPEL/6/i386/epel-release-6-8.noarch.rpm">http://mirror01.idc.hinet.net/EPEL/6/i386/epel-release-6-8.noarch.rpm</a></li>
<li>rpm -iUvh epel-release-6-8.noarch.rpm</li>
<li>yum clean all</li>
<li>yum list</li>
<li>yum remove gitosis</li>
<li>yum groupinstall &ldquo;Development Tools&rdquo; </li>
<li>yum update &amp;&amp; yum upgrade</li>
<li>yum install vim python wget curl git openssh-server</li>
<li>yum install sqlite sqlite-devel mysql mysql-libs mysql-devel</li>
<li>yum install ncurses-devel libcurl-devel libcurl curl patch sudo</li>
<li>yum install libxslt-devel libyaml-devel libxml2 libxml2-devel gdbm-devel libffi libffi-devel zlib zlib-devel openssl-devel readline readline-devel curl-devel openssl-devel pcre-devel memcached-devel valgrind-devel ImageMagick-devel ImageMagick libicu libicu-devel make bzip2 autoconf automake libtool bison redis</li>
<li>chkconfig redis on</li>
<li>service redis start</li>
<li>yum install postfix</li>
<li>chkconfig postfix on</li>
<li>service postfix start</li>
</ol>

<p>如果EPEL 套件庫少東西，請到 <a href="http://pkgs.org/">http://pkgs.org/</a> 把套件手動補齊。
比較常有問題的以下這幾個套件：</p>

<ul>
<li>gdbm-devel</li>
<li>libffi-devel</li>
<li>libicu-devel</li>
<li>iconv-devel</li>
<li>valgrind-devel</li>
<li>ImageMagick-devel</li>
</ul>

<h2>設定 Gitlab 系統帳號</h2>

<ol>
<li>useradd git</li>
<li>passwd git</li>
<li>chmod 755 /home/git</li>
<li>su - git</li>
<li>mkdir -p /home/git/.ssh</li>
<li>chmod -R 700 /home/git/.ssh</li>
<li>touch /home/git/.ssh/authorized_keys</li>
<li>chmod -R 600 /home/git/.ssh/authorized_keys</li>
<li>ssh-keygen -t rsa</li>
<li>cat /home/git/.ssh/id_rsa.pub &gt;&gt; /home/git/.ssh/authorized_keys</li>
</ol>

<h2>安裝 Ruby 環境</h2>

<ol>
<li>su - git</li>
<li>mkdir -p /home/git/temp</li>
<li>mkdir -p /home/git/ruby</li>
<li>cd /home/git/temp</li>
<li>wget -c &ldquo;<a href="http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p392.tar.gz">http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p392.tar.gz</a>&rdquo;</li>
<li>tar zxvf ruby-1.9.3-p392.tar.gz &amp;&amp; cd ruby-1.9.3-p392</li>
<li>./configure &ndash;prefix=/home/git/ruby</li>
<li>make</li>
<li>make install</li>
<li><p>vim ~/.bash_profile
<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>    PATH=$HOME/ruby/bin:$PATH:$HOME/bin;</div></pre></td></tr></table></div></figure></p></li>
<li><p>vim ~/.bashrc
<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>PATH=$HOME/ruby/bin:$PATH:$HOME/bin;</div></pre></td></tr></table></div></figure></p></li>
<li><p>source ~/.bash_profile</p></li>
<li><p>which ruby</p></li>
<li><p>ruby &ndash;version</p></li>
<li><p>gem install bundler</p></li>
<li><p>gem install charlock_holmes &ndash;version &#39;0.6.9&#39;</p></li>
<li><p>cd ~</p></li>
<li><p>rm -rf ~/temp</p></li>
</ol>

<h2>設定資料庫</h2>

<ol>
<li>yum install mysql-server mysql myslq-devel</li>
<li>chkconfig mysqld on</li>
<li>service mysqld start</li>
<li>mysql -u root -p</li>
<li>mysql&gt; CREATE DATABASE IF NOT EXISTS gitlab DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;</li>
<li>mysql&gt; CREATE USER &#39;gitlab&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;12345678&#39;;</li>
<li>mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON gitlab.* TO &#39;gitlab&#39;@&#39;localhost&#39;;</li>
</ol>

<h2>安裝 Gitlab Shell</h2>

<ol>
<li>su - git</li>
<li>cd /home/git</li>
<li>git clone <a href="http://github.com/gitlabhq/gitlab-shell.git">http://github.com/gitlabhq/gitlab-shell.git</a></li>
<li>cd gitlab-shell</li>
<li>cp config.yml.example config.yml</li>
<li><p>vim config.yml
<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'># GitLab user. git by default
</div><div class='line'>user: git
</div><div class='line'> </div><div class='line'># Url to gitlab instance. Used for api calls. Should be ends with slash.
</div><div class='line'>gitlab_url: &quot;<a href="http://test-git.mfc.cwb/">http://test-git.mfc.cwb/</a>&quot;
</div><div class='line'> </div><div class='line'>http_settings:
</div><div class='line'>#  user: someone
</div><div class='line'>#  password: somepass
</div><div class='line'>  self_signed_cert: false
</div><div class='line'> </div><div class='line'># Repositories path
</div><div class='line'>repos_path: &quot;/home/git/repositories&quot;
</div><div class='line'> </div><div class='line'># File used as authorized_keys for gitlab user
</div><div class='line'>auth_file: &quot;/home/git/.ssh/authorized_keys&quot;</div></pre></td></tr></table></div></figure></p></li>
<li><p>/home/git/gitlab-shell/bin/install</p></li>
</ol>

<h2>安裝 Gitlab</h2>

<ol>
<li>su - git</li>
<li>cd /home/git</li>
<li>git config &ndash;global user.name  &ldquo;GitLab&rdquo;</li>
<li>git config &ndash;global user.email &ldquo;<a href="mailto:gitlab@gitlab.YOUR.HOST">gitlab@gitlab.YOUR.HOST</a>&rdquo;</li>
<li>mkdir gitlab-satellites</li>
<li>git clone <a href="http://github.com/gitlabhq/gitlabhq.git">http://github.com/gitlabhq/gitlabhq.git</a> gitlab</li>
<li>cd gitlab</li>
<li>git checkout 5-0-stable</li>
<li>more VERSION</li>
<li>cp config/gitlab.yml.example config/gitlab.yml</li>
<li><p>vim config/gitlab.yml
<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>  ## GitLab settings
</div><div class='line'>  gitlab:
</div><div class='line'>    ## Web server settings
</div><div class='line'>    host: test-git.mfc.cwb
</div><div class='line'>    port: 80
</div><div class='line'>    https: false
</div><div class='line'>    user: git
</div><div class='line'> </div><div class='line'>  ## Gravatar
</div><div class='line'>  gravatar:
</div><div class='line'>    enabled: false</div></pre></td></tr></table></div></figure></p></li>
<li><p>mkdir tmp/pids/</p></li>
<li><p>chown -R git log/ tmp/</p></li>
<li><p>chmod -R u+rwX  log/ tmp/</p></li>
<li><p>cp config/unicorn.rb.example config/unicorn.rb</p></li>
<li><p>vim config/unicorn.rb
<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>  listen &quot;127.0.0.1:8080&quot;</div></pre></td></tr></table></div></figure></p></li>
<li><p>cp config/database.yml.mysql config/database.yml</p></li>
<li><p>vim config/database.yml
<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>production:
</div><div class='line'>  adapter: mysql2
</div><div class='line'>  encoding: utf8
</div><div class='line'>  reconnect: false
</div><div class='line'>  database: gitlab
</div><div class='line'>  pool: 5
</div><div class='line'>  username: gitlab
</div><div class='line'>  password: &quot;12345678&quot;
</div><div class='line'>  host: localhost</div></pre></td></tr></table></div></figure></p></li>
<li><p>cd /home/git/gitlab</p></li>
<li><p>-編輯 Gemfile 並將所有 git:// 與 https:// 改成 http://-</p></li>
<li><p>bundle install &ndash;no-deployment</p></li>
<li><p>bundle install &ndash;deployment &ndash;without development test postgres</p></li>
<li><p>bundle exec rake gitlab:setup RAILS_ENV=production</p></li>
<li><p>-bundle exec rake db:seed_fu RAILS_ENV=production-</p></li>
<li><p>bundle exec rake gitlab:env:info RAILS_ENV=production</p></li>
<li><p>bundle exec rake gitlab:check RAILS_ENV=production</p></li>
</ol>

<ul>
<li>碰到 invalid gem format for /path/to/cache/xxx.gem 問題，
直接刪掉該 cache 的 gem，再重跑 bundle install 即可</li>
</ul>

<h2>設定 Gitlab 啓動腳本</h2>

<ol>
<li>su - root</li>
<li>curl &ndash;output /etc/init.d/gitlab <a href="https://raw.github.com/gitlabhq/gitlab-recipes/master/init.d/gitlab">https://raw.github.com/gitlabhq/gitlab-recipes/master/init.d/gitlab</a></li>
<li>chkconfig &ndash;add gitlab</li>
<li>chkconfig gitlab on</li>
<li>chmod +x /etc/init.d/gitlab</li>
<li>/etc/init.d/gitlab start</li>
<li>/etc/init.d/gitlab status</li>
<li>Unicorn 與 Sidekiq 服務跑起來需要點時間，要等一下</li>
</ol>

<h2>設定 Apache</h2>

<ol>
<li>su - root</li>
<li>yum install httpd</li>
<li><p>vim /etc/httpd/conf/httpd.conf
<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>  NameVirtualHost *:80
</div><div class='line'> </div><div class='line'>  &lt;VirtualHost *:80&gt;
</div><div class='line'>            ServerName gitlab.YOUR.HOST
</div><div class='line'>            DocumentRoot /home/git/gitlab/public
</div><div class='line'>            CustomLog logs/gitlab-access.log combined
</div><div class='line'>            ErrorLog logs/gitlab-error.log
</div><div class='line'> </div><div class='line'>            ProxyPass /  <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a>
</div><div class='line'>            ProxyPassReverse /  <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a>
</div><div class='line'>            ProxyPreserveHost On
</div><div class='line'>  &lt;/VirtualHost&gt;</div></pre></td></tr></table></div></figure></p></li>
<li><p>chmod 755 /home/git</p></li>
<li><p>chkconfig httpd on</p></li>
<li><p>service httpd restart</p></li>
</ol>

<p>Gitlab 預設帳號：<a href="mailto:admin@local.host">admin@local.host</a><br>
Gitlab 預設密碼：5iveL!fe   </p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Gitlab CI]]></title>
<link href="http://zx1986.github.io/blog/gitlab-ci.html"/>
<updated>2013-06-01T19:17:35+08:00</updated>
<id>http://zx1986.github.io/blog/gitlab-ci</id>
<category term="git" /><category term="linux" /><category term="system" />

      <content type="html"><![CDATA[<p>在 RHEL（Red Hat/CentOS/Fedora）環境安裝 Gitlab CI；<br>
以下安裝過程爲 RHEL 6.3 x86_64 中的執行記錄。</p>

<h2>Install Required Packages</h2>

<ol>
<li>cd /opt</li>
<li>wget <a href="http://mirror01.idc.hinet.net/EPEL/6/i386/epel-release-6-8.noarch.rpm">http://mirror01.idc.hinet.net/EPEL/6/i386/epel-release-6-8.noarch.rpm</a></li>
<li>rpm -iUvh epel-release-6-8.noarch.rpm</li>
<li>yum clean all</li>
<li>yum groupinstall &ldquo;Development Tools&rdquo; </li>
<li>yum update &amp;&amp; yum upgrade</li>
<li>yum install vim python wget curl git openssh-server</li>
<li>yum install sqlite sqlite-devel mysql mysql-libs mysql-devel</li>
<li>yum install ncurses-devel libcurl-devel libcurl curl patch sudo</li>
<li>yum install libxslt-devel libyaml-devel libxml2 libxml2-devel gdbm-devel libffi libffi-devel zlib zlib-devel openssl-devel readline readline-devel curl-devel openssl-devel pcre-devel memcached-devel valgrind-devel ImageMagick-devel ImageMagick libicu libicu-devel make bzip2 autoconf automake libtool bison redis libpq-devel libicu-devel postgresql-libs postgresql-devel</li>
<li>chkconfig redis on</li>
<li>service redis start</li>
<li>yum install postfix</li>
<li>chkconfig postfix on</li>
<li>service postfix start</li>
</ol>

<h2>Setup Database (MySQL)</h2>

<ol>
<li>su - root</li>
<li>yum install mysql mysql-devel</li>
<li>chkconfig mysqld on</li>
<li>service mysqld start</li>
<li>mysql -u root -p</li>
<li>mysql&gt; CREATE DATABASE IF NOT EXISTS gitlab_ci DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;</li>
<li>mysql&gt; CREATE USER &#39;gitlab_ci&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;12345678&#39;;</li>
<li>mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON gitlab_ci.* TO &#39;gitlab_ci&#39;@&#39;localhost&#39;;</li>
</ol>

<ul>
<li>預設資料庫帳號爲 gitlab_ci</li>
<li>預設資料庫密碼爲 12345678</li>
</ul>

<h2>Setup Account (gitlab_ci)</h2>

<ol>
<li>useradd gitlab_ci</li>
<li>passwd gitlab_ci</li>
<li>chmod 755 /home/gitlab_ci</li>
</ol>

<h2>Setup Ruby (using RVM)</h2>

<ol>
<li>su - gitlab_ci</li>
<li>\curl -L <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable &ndash;ruby</li>
<li>echo &ldquo;source /home/gitlab_ci/.rvm/scripts/rvm&rdquo; &gt;&gt; ~/.bashrc</li>
</ol>

<h2>Setup Gitlab CI</h2>

<ol>
<li>su - gitlab_ci</li>
<li>cd /home/gitlab_ci/</li>
<li>git clone <a href="https://github.com/gitlabhq/gitlab-ci.git">https://github.com/gitlabhq/gitlab-ci.git</a></li>
<li>cd gitlab-ci</li>
<li>git checkout 2-2-stable</li>
<li>mkdir -p tmp/pids</li>
<li>mkdir -p tmp/sockets</li>
<li>gem install bundler</li>
<li>bundle &ndash;without development test</li>
<li>cp config/database.yml.mysql config/database.yml</li>
<li><p>vim config/database.yml
<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>    production:
</div><div class='line'>      adapter: mysql2
</div><div class='line'>      encoding: utf8
</div><div class='line'>      reconnect: false
</div><div class='line'>      database: gitlab_ci
</div><div class='line'>      pool: 5
</div><div class='line'>      username: gitlab_ci
</div><div class='line'>      password: &quot;12345678&quot;
</div><div class='line'>      host: localhost
</div><div class='line'>      # socket: /tmp/mysql.sock
</div><div class='line'> </div><div class='line'>    ......</div></pre></td></tr></table></div></figure></p></li>
<li><p>bundle exec rake db:setup RAILS_ENV=production</p></li>
<li><p>bundle exec whenever -w RAILS_ENV=production</p></li>
<li><p>crontab -l</p></li>
</ol>

<h2>Setup gitlab_ci Service Script</h2>

<ol>
<li>su - root</li>
<li>wget <a href="https://raw.github.com/gitlabhq/gitlab-ci/2-2-stable/lib/support/init.d/gitlab_ci">https://raw.github.com/gitlabhq/gitlab-ci/2-2-stable/lib/support/init.d/gitlab_ci</a> -P /etc/init.d/ &ndash;no-check-certificate</li>
<li>chmod +x /etc/init.d/gitlab_ci</li>
<li>/etc/init.d/gitlab_ci start</li>
<li>/etc/init.d/gitlab_ci status</li>
</ol>

<h2>Setup Nginx</h2>

<ol>
<li>yum install nginx</li>
<li>wget <a href="https://raw.github.com/gitlabhq/gitlab-ci/2-2-stable/lib/support/nginx/gitlab_ci">https://raw.github.com/gitlabhq/gitlab-ci/2-2-stable/lib/support/nginx/gitlab_ci</a> -P /etc/nginx/conf.d/ &ndash;no-check-certificate</li>
<li>mv /etc/nginx/gitlab_ci /etc/nginx/gitlab_ci.conf</li>
<li><p>vim /etc/nginx/gitlab_ci.conf
<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>    ......
</div><div class='line'> </div><div class='line'>    server {
</div><div class='line'>      listen YOUR_SERVER_IP:80;<br>
</div><div class='line'>      server_name YOUR_SERVER_NAME;<br>
</div><div class='line'>      root /home/gitlab_ci/gitlab-ci/public;
</div><div class='line'> </div><div class='line'>    ......</div></pre></td></tr></table></div></figure></p></li>
<li><p>chkconfig nginx on</p></li>
<li><p>service nginx start</p></li>
<li><p>netstat -ltn</p></li>
</ol>

<p>Gitlab Default Account: <a href="mailto:admin@local.host">admin@local.host</a><br>
Gitlab Default Password: 5iveL!fe      </p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Meteor]]></title>
<link href="http://zx1986.github.io/blog/meteor.html"/>
<updated>2013-05-30T16:44:42+08:00</updated>
<id>http://zx1986.github.io/blog/meteor</id>
<category term="framework" /><category term="javascript" />

      <content type="html"><![CDATA[<p><a href="http://docs.meteor.com">http://docs.meteor.com</a></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[tmux]]></title>
<link href="http://zx1986.github.io/blog/tmux.html"/>
<updated>2013-05-29T14:35:17+08:00</updated>
<id>http://zx1986.github.io/blog/tmux</id>


      <content type="html"><![CDATA[]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Gluster]]></title>
<link href="http://zx1986.github.io/blog/gluster.html"/>
<updated>2013-05-28T15:27:30+08:00</updated>
<id>http://zx1986.github.io/blog/gluster</id>
<category term="cluster" /><category term="linux" />

      <content type="html"><![CDATA[<p><a href="http://www.gluster.org">http://www.gluster.org</a></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Webmin]]></title>
<link href="http://zx1986.github.io/blog/webmin.html"/>
<updated>2013-05-28T14:53:26+08:00</updated>
<id>http://zx1986.github.io/blog/webmin</id>
<category term="linux" /><category term="system" />

      <content type="html"><![CDATA[<p><a href="http://www.webmin.com/">http://www.webmin.com/</a></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Zabbix]]></title>
<link href="http://zx1986.github.io/blog/zabbix.html"/>
<updated>2013-05-28T14:52:20+08:00</updated>
<id>http://zx1986.github.io/blog/zabbix</id>
<category term="linux" /><category term="network" /><category term="system" />

      <content type="html"><![CDATA[<p><a href="http://www.zabbix.com/">http://www.zabbix.com/</a></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[OpenStack]]></title>
<link href="http://zx1986.github.io/blog/openstack.html"/>
<updated>2013-05-27T15:33:32+08:00</updated>
<id>http://zx1986.github.io/blog/openstack</id>
<category term="cluster" /><category term="linux" /><category term="system" />

      <content type="html"><![CDATA[<p><a href="http://www.openstack.org/">http://www.openstack.org/</a></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[使用 Puppet]]></title>
<link href="http://zx1986.github.io/blog/puppet.html"/>
<updated>2013-05-26T21:43:54+08:00</updated>
<id>http://zx1986.github.io/blog/puppet</id>
<category term="linux" /><category term="ruby" />

      <content type="html"><![CDATA[<p><a href="http://puppetlabs.com/">Puppet</a> 
是用 Ruby 語言開發的 Client/Server 式的配置、設定、服務管理工具。</p>

<p>簡單描述一下，
就是所有機器的配置集中在 Puppet Server 上管理，
Puppet Client 機器連線到 Puppet Server，
Puppet Server 根據 Puppet Client 提供的資訊，
動態產生正確的配置，對 Puppet Client 進行設定。</p>

<p>Puppet Client 使用的是一個叫 facter 的工具取得主機基本資訊，
Puppet Server 根據傳來的資訊（例如：IP，hostname，OS）產生對應的配置內容。</p>

<p>在 Ubuntu 系統上安裝 Puppet 非常簡單：</p>
<div class="highlight"><pre><code class="text">sudo apt-get install ruby-full # 安裝 Ruby 環境
sudo apt-get install facter # 安裝 Facter 後可以直接執行 facter 測試一下
sudo apt-get install puppet # Puppet Client 套件 
sudo apt-get install puppetmaster # Puppet Server 套件，Puppet Client 不需安裝

# 在 Redhat 環境，Puppet Client 套件叫：puppet
# 在 Redhat 環境，Puppet Server 套件叫：puppet-server
</code></pre></div>
<p>Puppet 看待裝置或服務的哲學跟 UNIX 很像：
每一個裝置、服務對 Puppet 來說，都是一個「資源（Resource）」。</p>

<h3>*.pp 檔</h3>

<p>Puppet 解讀名爲 *.pp 的檔案，然後對不同的 Client 編譯產生不同的配置。</p>

<p>一個簡單的 test.pp 檔案內容如下：</p>
<div class="highlight"><pre><code class="text">file
{
    &quot;/tmp/test.txt&quot;: content =&gt; &quot;hello, world&quot;;
}
</code></pre></div>
<p>執行：</p>
<div class="highlight"><pre><code class="text">puppet test.pp
</code></pre></div>
<p>執行結果是在 /tmp 底下產生一個 test.txt 檔，且內容爲「hello, world」。</p>

<p>*.pp 有一套簡單的文法與規則，其中亦有類別跟繼承等，強烈建議閱讀文件！</p>

<h3>Puppet Client/Server 運作流程</h3>

<ol>
<li><p>Puppet Client 的 puppetd 程式呼叫 facter 程式，
facter 程式會偵測出 Puppet Client 主機的相關資訊，
例如 hostname、RAM、Hard Disk、IP 等等。
Puppet Client 的 puppetd 再透過 SSL 把這些訊息傳到 Puppet Server。</p></li>
<li><p>Puppet Server 的 puppetmaster 程式檢查 Puppet Client 送來的資訊，
會使用 Puppet Client 的 hostname 來找到 /etc/puppet/manifest 裡面對應的 node 配置，
然後分析以及解讀牽涉到的 *.pp 檔或 Puppet 程式碼，
Puppet Client 使用 facter 生成的訊息會被當成變數傳入這些 *.pp 檔或 Puppet 程式碼。</p></li>
<li><p>當 Puppet Server 知道需要處理哪些 *.pp 檔後，就會將它們進行解析，
這個 *.pp 檔解析的動作可以看成是程式的編譯（直譯？）。
解析會分成幾個階段，首先是語法檢查，語法錯誤就會直接報錯了；
語法檢查通過，會產生解析的結果，
這個結果同樣會透過 SSL 傳送回 Puppet Client。</p></li>
<li><p>Puppet Client 收到 Puppet Server 的解析結果，執行，並把執行的結果回傳。</p></li>
<li><p>Puppet Server 把 Puppet Client 的執行結果寫到 log。</p></li>
</ol>

<h3>Puppet Client/Server 配置</h3>

<p>Puppet Client 與 Puppet Server 的安裝、設定、配置，最好都使用 root 帳號。</p>

<p>進行 Client/Server 設置前，請務必千萬確定每臺主機的 hostname！
Puppet 的 Client/Server 配置有綁定 hostname 進行驗證，
且要求符合 FQDN 的 hostname。
請先執行 hostname 並檢查 /etc/hostname 進行確定，
並確認 /etc/hosts 檔案有正確的 hostname 與 IP 配對。</p>

<p>連線與驗證都需要 root 身份來進行。
Puppet Client 與 Server 的系統時間要校正一致，否則認證會出問題！
務必使用同樣的 NTP Server 進行時間同步！</p>

<p>在 Client/Server 環境中，
Puppet Server 預設讀取 *.pp 的路徑是：</p>
<div class="highlight"><pre><code class="text">/etc/puppet/manifests/
</code></pre></div>
<p>可以編寫一個 /etc/puppet/manifests/site.pp 檔測試：</p>
<div class="highlight"><pre><code class="text">node default
{
    file
    {
        &quot;/tmp/puppet_server.message&quot;:
        content =&gt; &quot;Hello, Puppet Client!&quot;;
    }
}
</code></pre></div>
<p>第一次進行 Client/Server 的配置連線會需要驗證。</p>

<p>先在 Puppet Client 執行：</p>
<div class="highlight"><pre><code class="text">puppetd --server 伺服器主機名稱 --test
</code></pre></div>
<p>再到 Puppet Server 執行：</p>
<div class="highlight"><pre><code class="text">puppetca --sign 客戶端主機名稱
</code></pre></div>
<p>最後回到 Puppet Client 執行：</p>
<div class="highlight"><pre><code class="text">puppetd --server 伺服器主機名稱 --test
</code></pre></div>
<p>此時，Puppet Client 應該會得到一個 /tmp/puppet_server.message 檔。</p>

<h3>Puppet CA 驗證</h3>

<p>Puppet 的驗證文件預設在：</p>
<div class="highlight"><pre><code class="text">/var/lib/puppet/ssl # Puppet Client
/var/lib/puppet/ssl/ca/ # Puppet Server
</code></pre></div>
<p>若某個 Puppet Client 的驗證有問題，
可以在 Puppet Server 使用 <code>puppetca --clean 主機名稱</code> 刪除認證，
相關指令可以參考：</p>
<div class="highlight"><pre><code class="text">puppetca --list --all # 列出目前 Server 所有的 Client
puppetca --list
puppetca --sign CLIENT_HOSTNAME
puppetca --print CLIENT_HOSTNAME
puppetca --clean CLIENT_HOSTNAME  # 刪除舊的認證

man puppetca
</code></pre></div>
<p>如果還是不行，直接到 Puppet Server 的 <code>/var/lib/puppet/ssl/ca/</code> 資料夾，
找到相對應的 *.pem，刪除，再重新認證 Puppet client。</p>

<h3><a href="http://projects.puppetlabs.com/projects/puppet/wiki/Puppet_Best_Practice2">建議的 /etc/puppet/ 目錄架構</a></h3>
<div class="highlight"><pre><code class="text">manifests/
        site.pp
        templates.pp
        nodes.pp

modules/
        {module_name}

modules/user/

services/

clients/

notes/

plugins/

tools/
</code></pre></div>
<h3><a href="http://docs.puppetlabs.com/guides/modules.html">使用 Puppet Module</a></h3>

<h3><a href="http://docs.puppetlabs.com/learning/templates.html">使用 Puppet Template</a></h3>

<p>Puppet Template 可以用來動態產生不同的內容。
應用的情境比較像是同樣的設定檔，但是有些許的設定不盡相同。
例如都是 httpd 服務，不見得所有 Puppet node 的 httpd.conf 都完全相同。</p>

<p>Puppet Template 檔是使用 Ruby 的 <a href="http://www.ruby-doc.org/stdlib/libdoc/erb/rdoc/classes/ERB.html">ERB Template</a>，並不難寫。 
Template 的使用也很簡單：</p>
<div class="highlight"><pre><code class="text">$value = template(&quot;my_template.erb&quot;)
</code></pre></div>
<p>my_template.erb 可換成 erb 檔的絕對路徑，
或把 erb 檔放到 Puppet 預設會找的路徑。
Red Hat 環境預設是 <code>/var/lib/puppet/templates</code>；
Ubuntu 環境預設是 <code>/etc/puppet/templates</code>。</p>

<p>可以使用 <code>puppet --configprint templatedir</code> 指令確認路徑，
實作的建議是把 erb 檔放到各個 Module 資料夾中。</p>

<p>題外話，可以執行 <code>puppet --configprint all</code> 看看 :-)</p>

<h3>Puppet 設定檔範例</h3>

<p><a href="https://github.com/example42/puppet-modules">https://github.com/example42/puppet-modules</a>
<a href="https://github.com/ghoneycutt/puppet-generic">https://github.com/ghoneycutt/puppet-generic</a><br>
<a href="https://github.com/jenkinsci/puppet-jenkins">https://github.com/jenkinsci/puppet-jenkins</a><br>
<a href="https://github.com/jfryman/puppet-nginx">https://github.com/jfryman/puppet-nginx</a></p>

<h3><a href="http://docs.puppetlabs.com/references/glossary.html">Puppet 名詞解釋</a></h3>

<p>catalog : A catalog is the totality of resources, files, properties, etc, for a given system.</p>

<p>manifest : A configuration file written in the Puppet language. These files should have the .pp extension.</p>

<p>module : A collection of classes, resource types, files, and templates, organized around a particular purpose. </p>

<p>node (general noun) : An individual server; for the purposes of discussing Puppet, this generally refers to an agent node.</p>

<p>node (Puppet language keyword) : A collection of classes and/or resources to be applied to the agent node whose unique identifier (“certname”) matches the specified node name. Nodes defined in manifests allow inheritance, although this should be used with care due to the behavior of dynamic variable scoping.</p>

<p>provider : A simple implementation of a type; examples of package providers are dpkg and rpm, and examples of user providers are useradd and netinfo. Most often, providers are just Ruby wrappers around shell commands, and they are usually very short and thus easy to create.</p>

<p>templates : templates are ERB files used to generate configuration files for systems and are used in cases where the configuration file is not static but only requires minor changes based on variables that Puppet can provide (such as hostname). See also distributable file.</p>

<p>type : abstract description of a type of resource. Can be implemented as a native type, plug-in type, or defined type.</p>

<p>agent or agent node : An operating system instance managed by Puppet. This can be an operating system running on its own hardware or a virtual image.</p>

<p>推薦文件：<br>
<a href="http://puppet.wikidot.com">http://puppet.wikidot.com</a></p>

<p>Reference：<br>
<a href="http://puppet-manifest-share.googlecode.com/files/puppet-1.0.pdf">http://puppet-manifest-share.googlecode.com/files/puppet-1.0.pdf</a><br>
<a href="http://www.comeonsa.com/category/puppet/">http://www.comeonsa.com/category/puppet/</a><br>
<a href="http://bitcube.co.uk/content/puppet-errors-explained">http://bitcube.co.uk/content/puppet-errors-explained</a><br>
<a href="http://www.example42.com">http://www.example42.com</a><br>
<a href="http://docs.puppetlabs.com/guides/troubleshooting.html">http://docs.puppetlabs.com/guides/troubleshooting.html</a><br>
<a href="http://docs.puppetlabs.com/guides/troubleshooting.html">http://docs.puppetlabs.com/guides/troubleshooting.html</a><br>
<a href="http://blog.akquinet.de/2011/11/23/managing-an-apache-server-with-puppet/">http://blog.akquinet.de/2011/11/23/managing-an-apache-server-with-puppet/</a>    </p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[安裝 Percona XtraDB Cluster]]></title>
<link href="http://zx1986.github.io/blog/setup-percona-xtradb-cluster.html"/>
<updated>2013-05-25T23:55:00+08:00</updated>
<id>http://zx1986.github.io/blog/setup-percona-xtradb-cluster</id>
<category term="cluster" /><category term="database" />

      <content type="html"><![CDATA[<p>很簡單地說，Percona XtraDB Cluster 就是 MySQL 打上了一些特殊的 patch，
讓 MySQL 可以將某一節點上的寫入動作，重製到其他節點上。</p>

<h2>背景知識</h2>

<h4>Codership</h4>

<p><a href="http://www.codership.com/company/">Codership</a> 是一家成立於 2007 年的公司，公司的 Founder 都是 Database 專家。
Codership 致力於研究及實做高擴展性且快速的資料庫同步機制（Replication），
並帶頭制定了名爲 WSREP 的 API 標準，且根據這套 API 實做了 Galera 同步器（Replicator）。</p>

<h4>WSREP（Write Set REPlication）</h4>

<p><a href="https://launchpad.net/wsrep/">WSREP</a> 是一個爲 DBMS（DataBase Management System）設計的 API 標準，
它爲 DBMS 類型的應用程式建立了一個 Replication 介面（Interface），
這個介面位於 DBMS 軟體與 Replication Servcie Provider（即 Replicator）之間。
<a href="https://launchpad.net/wsrep-group/">WSREP Group</a> 是討論與建立這個標準的開放性羣組。</p>

<blockquote>
<p>WSREP API defines a set of application callbacks and replication library calls necessary to implement synchronous writeset replication of transactional databases and similar applications. It aims to abstract and isolate replication implementation from application details.</p>
</blockquote>

<h4>Galera Replicator</h4>

<p><a href="https://launchpad.net/galera/">Galera</a> 是一套根據 WSREP 標準實做出來的 Replication 函式庫。
Galera 的運作架構可以參考<a href="http://www.codership.com/products/galera_replication/">它們的說明</a>。大致的原則是：
當對 Cluster 中其中一個節點做寫入（Write）時，
Galera 會自動將寫入動作 Replicate 到 Cluster 其他的節點上。</p>

<blockquote>
<p>Galera implements WSREP pluggable interface, and can provide several replication modes and topologies, including the ultimate Synchronous Multi-Master replication.</p>
</blockquote>

<h4>MySQL Galera Cluster</h4>

<p>傳統的 <a href="http://www.codership.com/products/mysql_galera/">MySQL Server</a> 只要打上 WSREP 的 Patch，支援了 WSREP 介面，
再搭配使用 Galera 函式庫，調整好設定檔，就可以組出一個 Cluster。</p>

<blockquote>
<p>MySQL/Galera cluster uses Galera library for the replication implementation. To interface with Galera replication, we have enhanced MySQL server to support replication API definition in the wsrep API project.</p>
</blockquote>

<h4>MariaDB Galera Cluster</h4>

<p>相較於 MySQL 要額外打 Patch，MariaDB 直接推出包好的 <a href="https://downloads.mariadb.org/mariadb-galera/">MariaDB Galera Cluster</a>，
MariaDB 還針對不同的 Linux 發佈版提供了<a href="https://downloads.mariadb.org/mariadb/repositories/">套件庫</a>。
它是 Percona XtraDB Cluster 之外的另一個選擇。</p>

<h4>Percona XtraDB Cluster（PXC）</h4>

<p>Percona 是一家專業的 MySQL 顧問與技術公司，
他們有一個很知名的 MySQL Blog：<a href="http://www.mysqlperformanceblog.com">MySQL Performance</a>；
Percona 也開發了許多知名的<a href="http://www.percona.com/software">資料庫工具與軟體</a>。</p>

<p>XtraDB 是 Percona 基於 InnoDB 改良出來的一個資料庫引擎。
在 XtraDB 引擎的基礎上，Percona 發佈了一個修改過的 MySQL：Percona Server，
而 Percona XtraDB Cluster 則是 Percona Server + Galera Library 的整合產品。
Percona XtraDB Cluster 的資料庫同步機制是靠 Galera 完成的（即 Write Replication）。 </p>

<h2>安裝 Percona XtraDB Cluster</h2>

<p>最新的 XtraDB 安裝檔：<br>
<a href="http://www.percona.com/downloads/Percona-XtraDB-Cluster/LATEST/">Percona XtraDB Cluster</a><br>
<a href="http://www.percona.com/downloads/XtraBackup/LATEST/">XtraBackup</a></p>

<p>以 Red Hat 環境（RHEL，Cent OS）爲例。</p>
<div class="highlight"><pre><code class="text">rpm -Uhv http://www.percona.com/downloads/percona-release/percona-release-0.0-1.x86_64.rpm
yum install Percona-XtraDB-Cluster-server Percona-XtraDB-Cluster-client percona-xtrabackup
vim /etc/my.cnf

    [mysqld]
    wsrep_provider=/usr/lib64/libgalera_smm.so
    wsrep_cluster_name=叢集的名稱
    wsrep_cluster_address=gcomm://節點一的位址,節點二的位址,節點三的位址
    wsrep_slave_threads=4
    wsrep_sst_method=rsync
    binlog_format=ROW
    default_storage_engine=InnoDB
    innodb_autoinc_lock_mode=2
    innodb_locks_unsafe_for_binlog=1

service mysql start --wsrep-cluster-address=&quot;gcomm://&quot;
mysql -e &quot;CREATE FUNCTION fnv1a_64 RETURNS INTEGER SONAME &#39;libfnv1a_udf.so&#39;&quot;
mysql -e &quot;CREATE FUNCTION fnv_64 RETURNS INTEGER SONAME &#39;libfnv_udf.so&#39;&quot;
mysql -e &quot;CREATE FUNCTION murmur_hash RETURNS INTEGER SONAME &#39;libmurmur_udf.so&#39;&quot;
mysqladmin -u root password &#39;12345678&#39;
service mysql stop
service mysql start
mysql -u root -p
mysql&gt; show status like &#39;wsrep_%&#39;;
</code></pre></div>
<p>以上是第一個節點的設定，其他節點只要重複到啓動 MySQL 那個步驟，
並將啓動的指令改爲：<code>service mysql start</code></p>

<ul>
<li><code>--wsrep-cluster-address=&quot;gcomm://&quot;</code> 參數代表初始化一個全新的叢集！</li>
</ul>

<h4>SST</h4>

<blockquote>
<p>State Snapshot Transfer is the full copy of data from one node to another.</p>
</blockquote>

<p>SST 是 State Snapshot Transfer 的縮寫，指的是 PXC 各節點間同步資料的方式。
可以在 /etc/my.cnf 中透過 wsrep_sst_method 參數來設定。
PXC 有三種同步方式，分別是：</p>

<ul>
<li>wsrep_sst_method=mysqldump</li>
</ul>

<blockquote>
<p>If you use mysqldump SST it should be the same as this mysql client connection address plus you need to set wsrep_sst_auth variable to hold user:password pair. The user should be privileged enough to read system tables from donor and create system tables on this node. For simplicity that could be just the root user. Note that it also means that you need to properly set up the privileges on the new node before attempting to join the cluster.</p>
</blockquote>

<ul>
<li>wsrep_sst_method=rsync</li>
</ul>

<blockquote>
<p>If you use rsync SST, wsrep_sst_auth is not necessary unless your SST script makes use of it.</p>
</blockquote>

<ul>
<li>wsrep_sst_method=xtrabackup</li>
</ul>

<blockquote>
<p>If you use xtrabackup as SST method, it will use /usr/bin/wsrep_sst_xtrabackup provided in Percona-XtraDB-Cluster-server package. And this script also needs user password if you have a password for root@localhost.</p>
</blockquote>

<p>要使用 <a href="http://serverfault.com/questions/389190/xtrabackup-for-sst-with-xtradb-cluster">xtrabackup 當作 SST method</a> 時，
需要設定 Database 的 root password 到 /etc/my.cnf 內，
例如：<code>wsrep_sst_auth=root:12345678</code></p>

<p>PXC 官方手冊：<br>
<a href="http://www.percona.com/doc/percona-xtradb-cluster/installation.html">http://www.percona.com/doc/percona-xtradb-cluster/installation.html</a><br>
<a href="http://www.percona.com/doc/percona-xtradb-cluster/manual/bootstrap.html">http://www.percona.com/doc/percona-xtradb-cluster/manual/bootstrap.html</a>   </p>

<p>PXC 專有名詞：<br>
<a href="http://www.percona.com/doc/percona-xtradb-cluster/glossary.html">http://www.percona.com/doc/percona-xtradb-cluster/glossary.html</a></p>

<p>Reference：<br>
<a href="http://www.mysqlperformanceblog.com/2013/01/29/how-to-start-a-percona-xtradb-cluster/">http://www.mysqlperformanceblog.com/2013/01/29/how-to-start-a-percona-xtradb-cluster/</a><br>
<a href="http://www.percona.com/files/presentations/WEBINAR-percona-xtradb-cluster-installation-and-setup.pdf">http://www.percona.com/files/presentations/WEBINAR-percona-xtradb-cluster-installation-and-setup.pdf</a>   </p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[使用 SQLite]]></title>
<link href="http://zx1986.github.io/blog/sqlite.html"/>
<updated>2013-05-25T09:15:00+08:00</updated>
<id>http://zx1986.github.io/blog/sqlite</id>
<category term="database" />

      <content type="html"><![CDATA[]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[grep &amp; ack-grep &amp; ag]]></title>
<link href="http://zx1986.github.io/blog/grep.html"/>
<updated>2013-05-24T09:37:12+08:00</updated>
<id>http://zx1986.github.io/blog/grep</id>
<category term="code" /><category term="linux" />

      <content type="html"><![CDATA[<p>Sliver</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[sed]]></title>
<link href="http://zx1986.github.io/blog/sed.html"/>
<updated>2013-05-24T09:37:09+08:00</updated>
<id>http://zx1986.github.io/blog/sed</id>
<category term="linux" />

      <content type="html"><![CDATA[]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[awk]]></title>
<link href="http://zx1986.github.io/blog/awk.html"/>
<updated>2013-05-24T09:37:05+08:00</updated>
<id>http://zx1986.github.io/blog/awk</id>
<category term="linux" />

      <content type="html"><![CDATA[]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Resque]]></title>
<link href="http://zx1986.github.io/blog/resque.html"/>
<updated>2013-05-23T17:04:00+08:00</updated>
<id>http://zx1986.github.io/blog/resque</id>
<category term="nosql" /><category term="queue" />

      <content type="html"><![CDATA[]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Redis]]></title>
<link href="http://zx1986.github.io/blog/redis.html"/>
<updated>2013-05-23T17:04:00+08:00</updated>
<id>http://zx1986.github.io/blog/redis</id>
<category term="database" /><category term="nosql" />

      <content type="html"><![CDATA[]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[使用 git-flow]]></title>
<link href="http://zx1986.github.io/blog/git-flow.html"/>
<updated>2013-05-22T17:28:30+08:00</updated>
<id>http://zx1986.github.io/blog/git-flow</id>
<category term="git" />

      <content type="html"><![CDATA[]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[使用 Github]]></title>
<link href="http://zx1986.github.io/blog/using-github.html"/>
<updated>2013-05-22T15:53:47+08:00</updated>
<id>http://zx1986.github.io/blog/using-github</id>
<category term="git" />

      <content type="html"><![CDATA[<p><a href="https://help.github.com/">https://help.github.com/</a></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[瞭解 Git]]></title>
<link href="http://zx1986.github.io/blog/understand-git.html"/>
<updated>2013-05-21T15:49:35+08:00</updated>
<id>http://zx1986.github.io/blog/understand-git</id>
<category term="git" />

      <content type="html"><![CDATA[<p><a href="http://ihower.tw/git/">http://ihower.tw/git/</a></p>

<p><a href="http://ndpsoftware.com/git-cheatsheet.html">http://ndpsoftware.com/git-cheatsheet.html</a><br>
<a href="http://hoth.entp.com/output/git_for_designers.html">http://hoth.entp.com/output/git_for_designers.html</a><br>
<a href="http://eagain.net/articles/git-for-computer-scientists/">http://eagain.net/articles/git-for-computer-scientists/</a>   </p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[使用 Git]]></title>
<link href="http://zx1986.github.io/blog/using-git.html"/>
<updated>2013-05-21T15:44:28+08:00</updated>
<id>http://zx1986.github.io/blog/using-git</id>
<category term="git" />

      <content type="html"><![CDATA[<p><a href="http://git-scm.com/">Git</a> 是一套版本控制系統（Version Control System），
常用在對程式碼或文件進行版本管理及協作。
從前比較常用的版本控制系統是 SVN（Subversion）， 
但 SVN 是中央式的，而 Git 是分散式的，
且 Git 比 SVN 強大、先進許多。</p>

<p>我簡單解釋版本控制的概念，請想像一下：</p>

<p>你電腦內的資料夾類似一個書櫃，書櫃裡有許多書（檔案），
偶而有新書進來（新增檔案），有舊書捐出去（刪除檔案），
有時候會在某些書上作筆記、寫心得、畫畫（檔案內容變動）。</p>

<p>你在書櫃的側邊貼上一張「大大的白紙」，對書櫃裡的所有變動作紀錄。</p>

<p>紀錄新書擺入的時間，擺放的位置，甚至後面加個註記：『購於網路拍賣』；
紀錄舊書清除的時間，原本的位置，加個註記：『捐給讀書會』；
紀錄某書寫入筆記的時間，筆記的內容，心得或隨手塗鴉；
紀錄 &hellip;&hellip;</p>

<p>你可以把這張書櫃側邊貼著的「大大白紙」想像成版本控制系統（Git），
而且版本控制系統（Git）做的記錄會更鉅細靡遺。</p>

<p>當你對一個資料夾啟用 Git 進行追蹤管理與控制時（Git 初始化時），
Git 程式會在該資料夾底下新增一個名為「.git」的隱藏資料夾，
「.git」類似於前面提到那張「大大的白紙」，裡面紀錄了檔案的變化史。
Git 會對該資料夾內所有的檔案與其底層的所有資料夾進行紀錄追蹤，
而追蹤、記錄的結果都會儲存到「.git」這個資料夾內。</p>

<p>不過，Git 並不會主動記錄，必須是由使用者操作它去執行記錄的動作。
使用者類似史官的角色，而 Git 則是書寫史冊的工具。</p>

<p>Git 背後的運作方式是非常聰明而複雜的，
它的功能也不僅僅在於記錄（還有恢復、合併、差異處理等等）。</p>

<p>團隊合作時，同樣一個文件，在你手上跟在他人手上，可能有不一樣的變化史。
當你的檔案要與他人的合併時，內容有出入的地方，Git 會協助進行處理。
（例如開發同一個程式，你寫的 code 可能被他人改動，或反之。）</p>

<h3>安裝與設定 Git</h3>

<p>Ubuntu 底下安裝 Git 非常簡單，只要在終端機執行：</p>
<div class="highlight"><pre><code class="text">sudo apt-get install git-core git-doc
</code></pre></div>
<p>接着，建議執行以下指令，將系統預設編輯器設定為 Vim：</p>
<div class="highlight"><pre><code class="text">sudo update-alternatives --config editor
</code></pre></div>
<p>每個使用者帳號都會有自己的 Git 設定檔，通常是：</p>
<div class="highlight"><pre><code class="text">~/.gitconfig
</code></pre></div>
<p>例如我的設定檔內容是：</p>
<div class="highlight"><pre><code class="text">[user]
name = 張旭
email = zx1986@gmail.com

[color]
diff = auto
</code></pre></div>
<p>初始化 Git
（資料夾內會多出一個名為 .git 的隱藏資料夾）：</p>
<div class="highlight"><pre><code class="text">git init
</code></pre></div>
<p>之後只要每次修改或新增檔案後，
執行以下兩個指令，Git 就會做一次紀錄：</p>
<div class="highlight"><pre><code class="text">git add 修改或新增的檔案名
git commit -m &#39;關於此次修改的描述訊息&#39;
</code></pre></div>
<p>可以開一個新的資料夾進行練習：</p>
<div class="highlight"><pre><code class="text">mkdir test
cd test
touch hello
git init
git add hello
git commit -m &#39;hello, Git!&#39;
</code></pre></div>
<p>好了，您已經開始在使用 Git 啦！</p>

<h3>Git 輔助說明</h3>

<p>需要注意，Git 不會把空的資料夾加入控管，
例如 log、cache 這類資料夾，我們通常不會想要追蹤裏面的檔案，
但還是需要這個資料夾存在，可以在底下建立一個隱藏檔，例如 .gitkeep：</p>
<div class="highlight"><pre><code class="text">cd log
tocuh .gitkeep
</code></pre></div>
<p>在跟「.git」同一層的目錄中，可以建立一個 .gitignore 檔案。
.gitignore 用來設定「不希望被 Git 控管的檔案與資料夾」。
一個簡單的 .gitignore 內容可以是這樣：</p>
<div class="highlight"><pre><code class="text">cache/
log/*.log
tmp/
*.tmp
*.swp
*.o
*.so
*.a
*.exe
*~
</code></pre></div>
<p>執行 <code>git help</code> 會顯示常用的 Git 指令與簡單說明：</p>
<div class="highlight"><pre><code class="text">add        Add file contents to the index
bisect     Find by binary search the change that introduced a bug
branch     List, create, or delete branches
checkout   Checkout a branch or paths to the working tree
clone      Clone a repository into a new directory
commit     Record changes to the repository
diff       Show changes between commits, commit and working tree, etc
fetch      Download objects and refs from another repository
grep       Print lines matching a pattern
init       Create an empty git repository or reinitialize an existing one
log        Show commit logs
merge      Join two or more development histories together
mv         Move or rename a file, a directory, or a symlink
pull       Fetch from and merge with another repository or a local branch
push       Update remote refs along with associated objects
rebase     Forward-port local commits to the updated upstream head
reset      Reset current HEAD to the specified state
rm         Remove files from the working tree and from the index
show       Show various types of objects
status     Show the working tree status
tag        Create, list, delete or verify a tag object signed with GPG
</code></pre></div>
<p>在 Git 指令後加上 -h 參數，能夠查詢該指令詳細的用法，例如：</p>
<div class="highlight"><pre><code class="text">git add -h
git commit -h
git pull -h
git push -h
</code></pre></div>
<p>要查詢更完整的指令手冊，則執行：<code>git help 指令名稱</code></p>

<h3>練習 Git</h3>

<p>我推薦一個非常棒的線上練習：<a href="http://try.github.io">Try Git</a></p>

<p>這是由線上學習網站 <a href="http://codeschool.com">Code School</a> 開發的，
他們還有一個 Git Real 的系列課程，我也非常推薦，
但 Git Real 系列課程是需要收費的。</p>

<p>Try Git 會帶着你練習基礎的 Git 指令，
畫面上半部是簡單明瞭的指令與情境說明，
畫面中間是一個模擬的 Console 端介面，
畫面下半部是當前情境下資料夾內的狀況。
雖然內容都是英文，但用字遣詞並不難，
就當成是玩電動闖關，邊玩邊學。</p>

<p>當進行到 Remote Repositories 這個關卡時，
如果對 Repository、Local、Remote 不大瞭解，
可以再回來這，繼續閱讀後面的內容。</p>

<h3>關於 Git Repository 與 Branch</h3>

<p>被 Git 所管理的專案，就是 Git Repository（倉儲）。
簡單點說，一個含有「.git」的資料夾，就是一個 Git Repository。
而一個 Git Repository 內，可以建立很多 Branch（分支），
不同的分支代表不同的變化史。</p>

<p>分支是可以任意建立、刪除、合併的。</p>

<p>Git Repository 裡預設的 Trunk Branch（主幹）稱為「master」，
其他的 Branch（分支）則由使用者自行命名，
master 這個 branch 也是可以被改成其他名字的。
（其實 Git 的世界並沒有 Trunk 這種講法，那是 SVN 的習慣，
在 Git 的世界，應該說那是“一個被叫做 master 的 branch”。）</p>

<p>Git 是一個分散式的版本控制系統，不同於 SVN 的 Server/Client 架構，
Git 不需要像 SVN 必須有一個 Repository Server 作為主要的倉儲伺服器。
Git 預設就可以使用 ssh 互相進行 Repository 傳輸了。</p>

<p>當使用 git clone 指令從遠端複製一個 Git Repository 到本地端電腦上時，
遠端的 Git Repository 通常稱為「origin」，「origin」可能有若干的 branch。
本地端 Git Repository 沒有特別的名稱，本地端也有自己的 branch。</p>

<p><code>git remote -v</code> 指令可以查詢當前 Git Repository 的遠端來源。</p>

<p>假設一個簡單的應用情境：</p>

<p>假設遠端的電腦叫做 Remote；本地端的電腦叫做 Local。
Remote 上面有一個 Git Repository 資料夾叫做 remote_repository。</p>

<p>要將 remote_repository 複製到 Local 並命名為 local_repository，
在 Local 執行：</p>
<div class="highlight"><pre><code class="text">Local$ git clone 「Remote 使用者帳號@Remote 位址」:「remote_repository 在 Remote 上的路徑」   local_repository
</code></pre></div>
<p>如果您執行過 scp 指令，相信對這個 git clone 格式會覺得很熟悉。</p>

<p>複製完成（git clone）後，Local 與 Remote 已經可以分開獨立工作了。
Git 不必拘泥於一定要把修改過的檔案存回當初取得檔案的地方。
Remote 可以在 remote_repository 裡發展它的檔案；
Local 可以在 local_repository 裡發展它的檔案。</p>

<p>等到哪天 Remote 突然想取得並合併 Local 發展的檔案，
可以在 Remote 上執行：</p>
<div class="highlight"><pre><code class="text">Remote$ git pull 「Local 使用者帳號@Local 位址」:「local_repository 在 Local 上的路徑」
</code></pre></div>
<p>當然，如果 Local 想取得與合併其他人發展的檔案，
可以在 Local 上執行：</p>
<div class="highlight"><pre><code class="text">Local$ git pull 「使用者帳號@位址」:「路徑」
</code></pre></div>
<ul>
<li>補充說明</li>
</ul>

<p>git fetch - Download objects and refs from another repository.<br>
git merge - Join two or more development histories together.<br>
git pull - Fetch from and merge with another repository or a local branch.   </p>

<p><code>git pull</code> 等於先執行了 <code>git fetch</code>，然後再自動執行 <code>git merge</code> 。
<a href="http://longair.net/blog/2009/04/16/git-fetch-and-merge">有前輩建議</a>少用 <code>git pull</code>，改用 <code>git fetch</code> 搭配 <code>git merge</code> 。
<a href="http://ihower.tw/blog/archives/3843">也有前輩建議</a>應當多使用 <code>git rebase</code> 或 <code>git pull --rebase</code> 。</p>

<h3>SVN 式的往日時光</h3>

<p>之前，我在不同的電腦上修改程式：研究室的電腦、宿舍的電腦、筆記型電腦。
因此我在研究室的一台主機上架了 SVN 伺服器，程式主要版本儲存在 SVN 伺服器上。
每當在不同的電腦進行程式編輯時，會先從 SVN 伺服器上抓最新版本的程式下來。
編輯告一段落後，再把修改過的程式上傳回 SVN 伺服器。
程式集中在一台 SVN 伺服器上，要編輯時從上面更新下來，編輯完再更新回去。</p>

<p>從 SVN 轉換到 Git 時，會很習慣於從前 SVN 那種模式：</p>

<ol>
<li>使用 svn checkout 從 SVN 伺服器將整個 Repository 複製到本機端。</li>
<li>本機端對 Repository 的內容進行編輯、修改、新增、刪除等等。</li>
<li>使用 svn update 檢查 SVN 伺服器有沒有其他更新與自己修改的內容有衝突。</li>
<li>解決內容衝突的情況。</li>
<li>使用 svn commit 將自己本機端的所有修改上傳到 SVN 伺服器。</li>
</ol>

<p>怎麼用 Git 做到類似 SVN 那樣的情形？
有個簡單的方法。</p>

<p>首先，選定一台要當 Repository Server 的機器，假設叫 Server。
在 Server 開一個空的資料夾，假設叫 origin，並切換到該資料夾下。</p>
<div class="highlight"><pre><code class="text">Server$ mkdir origin
Server$ cd origin
</code></pre></div>
<p>在空資料夾底下執行：</p>
<div class="highlight"><pre><code class="text">Server$ git init --bare
</code></pre></div>
<p>這個動作會產生一個 <a href="http://www.saintsjd.com/2011/01/what-is-a-bare-git-repository/">Bare Git Repository</a>，
該資料夾下會產生：</p>
<div class="highlight"><pre><code class="text">branches/
config
description
HEAD
hooks/
info/
objects/
refs/
</code></pre></div>
<p>本地端的電腦，假設叫 Local。
Local 上一個叫 local_project 的資料夾要上傳到 Server 進行統一管理。</p>

<p>切換到該資料夾底下，執行：</p>
<div class="highlight"><pre><code class="text">Local$ git add .
Local$ git commit -a -m &#39;initialization&#39;
Local$ git remote add origin 「Server 使用者帳號@Server 位址」:「Server 上 origin 資料夾的路徑」
Local$ git push origin master
</code></pre></div>
<p>完成以後，其他的電腦就可以使用以下指令，
從 Server 上的 origin 複製 local_project 的內容：</p>
<div class="highlight"><pre><code class="text">Other$ git clone 「Server 使用者帳號@Server 位址」:「Server 上 origin 資料夾的路徑」 「自訂的資料夾名稱」
</code></pre></div>
<p>其他電腦要將其修改的內容傳回 Server，可以執行：</p>
<div class="highlight"><pre><code class="text">Other$ git push origin master
</code></pre></div>
<h3>Git Repository Hosting</h3>

<p>Git Repository 除了使用 git 協定或 ssh 協定，
還可以使用 http、https 等方式傳輸、瀏覽、管理。
如果不想要用簡單的 Bare Git Repository 架設 Repository Server，
有些 Open Source 的工具可以選擇：</p>

<ul>
<li><a href="https://github.com/res0nat0r/gitosis">Gitosis</a></li>
<li><a href="http://gitorious.org/">Gitorious</a></li>
<li><a href="http://gitlab.org/">Gitlab</a></li>
</ul>

<p>全世界最知名的 Git Repository Hosting 網站：</p>

<ul>
<li><a href="https://github.com/">Github</a></li>
</ul>

<p>中國大陸版的 Github：</p>

<ul>
<li><a href="https://gitcafe.com/">GitCafe</a></li>
</ul>

<p>Github 與 GitCafe 都非常棒，
它們的使用教學也有很多 Git 技巧可以參考：</p>

<p><a href="https://help.github.com/">https://help.github.com/</a><br>
<a href="https://gitcafe.com/GitCafe/Help">https://gitcafe.com/GitCafe/Help</a>   </p>

<p>GitCafe 的 Git <a href="https://gitcafe.com/GitCafe/Help/blob/master/Git/Git_Cheat_Sheet.md">作弊表</a>。</p>

<p><em>Git Cheating Sheet</em></p>
<div class="highlight"><pre><code class="text">git init         # 將當前資料夾進行 Git 初始化

git add .        # 將當前資料夾內所有檔案加入 Git 追蹤（tracking 或 staging）
git add 檔案名稱 # 把當前資料夾內某個檔案加入 Git 追蹤（tracking 或 staging）

git status       # 查詢從上一次 commit 到現在，資料夾裡有哪些變化，各個檔案處於什麼狀況

git commit -a         # 將目前的變動送繳 Git 進行紀錄，會進入編寫修改訊息的畫面
git commit -a -m &quot;*&quot;  # commit 時直接寫入修改訊息，不進入編寫修改訊息的畫面

git tag v1.0          # 將當前 commit 過後的檔案版本命名為 v1.0

git diff                             # 比較所有檔案的內容與上一次 commit 時有何差異
git diff v1.0 v2.0                   # 比較 v1.0 與 v2.0 兩個版本間所有檔案的內容
git diff v1.0:檔案名稱 v2.0:檔案名稱 # 比較 v1.0 與 v2.0 兩個版本間某個檔案的內容

git log                         # 查詢所有版本的修改狀況，顯示各版本的 hash 編號
git log -p                      # 查詢哪幾行被修改
git log --stat --summary        # 查詢每個版本間變動的檔案跟行數

git show v1.0                   # 查詢 v1.0 版裡的修改內容
git show v1.0:檔案名稱          # 查詢某個檔案在 v1.0 時的內容

git show HEAD          # 看此版本修改的資料
git show HEAD^         # 看此版本前一版的修改的資料
git show HEAD^^        # 看此版本前前一版的修改的資料

git grep &quot;*&quot; v1.0      # 查詢 0.01 版裡頭有沒有某些內容
git grep &quot;*&quot;           # 查詢現在的版本裡有沒有某些內容

git branch                # 查看現有的分支
git branch 分支名稱       # 建立新的分支
git branch 分支名稱 v1.0  # 依照 v1.0 版本裡的內容來建立一個分支
git branch -d 分支名稱    # 刪除某個分支

git merge 某個分支名稱    # 將當前所在的分支與某個分支合併，如果出現衝突，會紀錄在有衝突的檔案中

git checkout master       # 切換到主幹上
git checkout 分支名稱     # 切換到某個分支上

git checkout HEAD         # 將所有檔案恢復到上次 commit 的狀態
git checkout -- 檔案名稱  # 將某個檔案恢復到上次 commit 的狀態

git reset --hard 某個版本的 hash 編號   # 整個 Repository 恢復到某個版本的狀態

git count-objects     # 分析 Git 資料庫狀況，計算鬆散的物件
git gc                # 維護 Git 資料庫，重組物件
git fsck --full       # 應該是類似 Git 磁碟重組之類的東西
</code></pre></div>
<p>Reference：<br>
<a href="http://github.com/schacon/whygitisbetter">http://github.com/schacon/whygitisbetter</a><br>
<a href="http://git-scm.com/documentation">http://git-scm.com/documentation</a><br>
<a href="http://gitcafe.com/riku/GitTips">http://gitcafe.com/riku/GitTips</a><br>
<a href="http://gitimmersion.com/">http://gitimmersion.com/</a><br>
<a href="http://gitref.org">http://gitref.org</a><br>
<a href="http://rypress.com/tutorials/git/">http://rypress.com/tutorials/git/</a>    </p>
]]></content>
    </entry>
  
</feed>
